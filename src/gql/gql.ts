/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n    mutation GetCookie($content: TokenContent!) {\n        user {\n            getCookie(content: $content) {\n                access\n                refresh\n            }\n        }\n    }\n": types.GetCookieDocument,
    "\n    mutation GetToken($content: TokenContent!) {\n        user {\n            getToken(content: $content) {\n                access\n                refresh\n            }\n        }\n    }\n": types.GetTokenDocument,
    "\n    mutation GetRefreshToken($content: RefreshTokenContent!) {\n        user {\n            getRefreshToken(content: $content) {\n                access\n            }\n        }\n    }\n": types.GetRefreshTokenDocument,
    "\n    mutation CreateProfile($content: ProfileContent) {\n        customer {\n            createProfile(content: $content) {\n                first_name\n                last_name\n            }\n        }\n    }\n": types.CreateProfileDocument,
    "\n    mutation OtpSend($content: OTPSendContent) {\n        customer {\n            otpSend(content: $content)\n        }\n    }\n": types.OtpSendDocument,
    "\n    mutation OtpSendV2($content: OTPSendContent) {\n        customer {\n            otpSendV2(content: $content) {\n                is_forget_password\n                is_register\n            }\n        }\n    }\n": types.OtpSendV2Document,
    "\n    mutation otpSendSignup($content: GetTokenByOTPSingUpContent) {\n        customer {\n            otpSendSignup(content: $content) {\n                refresh\n                access\n            }\n        }\n    }\n": types.OtpSendSignupDocument,
    "\n    mutation GetChangePasswordAuth($content: GetTokenByOTPContent) {\n        customer {\n            getChangePasswordAuth(content: $content) {\n                auth\n            }\n        }\n    }\n": types.GetChangePasswordAuthDocument,
    "\n    mutation ForgetPassword($content: ForgetPasswordContent) {\n        customer {\n            forgetPassword(content: $content)\n        }\n    }\n": types.ForgetPasswordDocument,
    "\n    mutation ChangePasswordWithoutOtp($content: ChangePasswordWithoutOtpContent) {\n        customer {\n            changePasswordWithoutOtp(content: $content)\n        }\n    }\n": types.ChangePasswordWithoutOtpDocument,
    "\n    mutation UpdateNotificationSetting($content: NotificationSettingContent) {\n        customer {\n            updateNotificationSetting(content: $content) {\n                hot_offer_available_email_notify\n                id\n                product_available_sms_notify\n                product_available_email_notify\n                product_available_internal_notify\n                hot_offer_available_sms_notify\n                hot_offer_available_internal_notify\n                receive_order_sms_notify\n                receive_order_email_notify\n                receive_order_internal_notify\n                order_invoice_sms_notify\n                order_invoice_email_notify\n                order_invoice_internal_notify\n                return_invoice_sms_notify\n                return_invoice_email_notify\n                return_invoice_internal_notify\n                survey_sms_notify\n                survey_email_notify\n                survey_internal_notify\n            }\n        }\n    }\n": types.UpdateNotificationSettingDocument,
    "\n    mutation UpdateProfile($content: ProfileContent) {\n        customer {\n            updateProfile(content: $content) {\n                id\n                phone_number\n                national_code\n                telephone_number\n                sheba_number\n                card_number\n                birthday\n                gender\n                marriage_date\n                first_name\n                last_name\n                email\n                gender_display\n            }\n        }\n    }\n": types.UpdateProfileDocument,
    "\n    mutation PaymentCard($orderId: ID!, $image: Upload!) {\n        customer {\n            paymentCard(orderId: $orderId, image: $image)\n        }\n    }\n": types.PaymentCardDocument,
    "\n    mutation UpdateBasket($uuid: String, $content: UpdateBasketContent) {\n        customer {\n            updateBasket(content: $content, uuid: $uuid) {\n                id\n                temp_id\n                basket_items {\n                    product_id\n                    amount\n                    cost\n                    cost_change\n                    discount_amount\n                    has_loyalty\n                    id\n                    image {\n                        id\n                        image\n                    }\n                    is_unlimited\n                    loyalty_gift\n                    max_quantity\n                    online_cost\n                    online_primary_cost\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                    primary_cost\n                    product_label\n                    stock\n                    orderable_count\n                    variant_name\n                    variant_id\n                    tax\n                    single_tax\n                    bonus_value\n                }\n            }\n        }\n    }\n": types.UpdateBasketDocument,
    "\n    mutation VoucherCheck($content: VoucherCheckContent!) {\n        customer: promotion {\n            voucherCheck(content: $content) {\n                amount\n                code\n                expire_date\n                id\n                limit\n                start_date\n                voucher_type\n                voucher_type_display\n            }\n        }\n    }\n": types.VoucherCheckDocument,
    "\n    mutation RemoveFavorite($id: ID!) {\n        customer {\n            removeFavorite(id: $id)\n        }\n    }\n": types.RemoveFavoriteDocument,
    "\n    mutation AddFavorite($id: ID!) {\n        customer {\n            addFavorite(id: $id)\n        }\n    }\n": types.AddFavoriteDocument,
    "\n    mutation CreateOrder($content: CreateOrderContent) {\n        customer {\n            createOrder(content: $content) {\n                id\n                gateway_link\n                transaction_type\n                registration_type\n            }\n        }\n    }\n": types.CreateOrderDocument,
    "\n    mutation DeleteAddress($id: ID!) {\n        customer {\n            deleteAddress(id: $id)\n        }\n    }\n": types.DeleteAddressDocument,
    "\n    mutation CreateAddress($content: AddressContent) {\n        customer {\n            createAddress(content: $content) {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n": types.CreateAddressDocument,
    "\n    mutation PartialUpdateAddress($id: ID!, $content: AddressContent) {\n        customer {\n            partialUpdateAddress(id: $id, content: $content) {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n": types.PartialUpdateAddressDocument,
    "\n    mutation GetGateway($id: ID, $content: GatewayLinkUrlContent!) {\n        customer {\n            getGateway(id: $id, content: $content) {\n                gateway_link\n            }\n        }\n    }\n": types.GetGatewayDocument,
    "\n    mutation ClearCookie {\n        user {\n            clearCookie\n        }\n    }\n": types.ClearCookieDocument,
    "\n    mutation CancelOrder($id: ID!) {\n        customer {\n            cancelOrder(id: $id)\n        }\n    }\n": types.CancelOrderDocument,
    "\n    mutation UpdateReceiveStatus($orderId: ID!, $content: UpdateReceiveStatusContent!) {\n        customer {\n            updateReceiveStatus(id: $orderId, content: $content)\n        }\n    }\n": types.UpdateReceiveStatusDocument,
    "\n    mutation ReturnOrder($content: ReturnOrderContent) {\n        customer {\n            returnOrder(content: $content) {\n                id\n                status\n                reference_code\n                order_reference_code\n                created_at\n                items {\n                    id\n                    status_display\n                    reason\n                    returned_cost\n                    count\n                    description\n                    reply_reason\n                    reply_description\n                    relative_voucher_amount\n                }\n                status_display\n                order_created_at\n                first_name\n                last_name\n                phone_number\n                card_number\n                total_returned_cost\n            }\n        }\n    }\n": types.ReturnOrderDocument,
    "\n    mutation UpdateThemeCustomization($themeName: String, $data: JSON) {\n        customer {\n            updateThemeCustomization(themeName: $themeName, data: $data) {\n                id\n                data\n            }\n        }\n    }\n": types.UpdateThemeCustomizationDocument,
    "\n    mutation CreateThemeCustomization($themeName: String, $data: JSON) {\n        customer {\n            createThemeCustomization(themeName: $themeName, data: $data) {\n                id\n                data\n            }\n        }\n    }\n": types.CreateThemeCustomizationDocument,
    "\n    mutation CreateStoreOpeningNotifier($content: CreateStoreOpeningNotifierContent) {\n        customer {\n            createStoreOpeningNotifier(content: $content)\n        }\n    }\n": types.CreateStoreOpeningNotifierDocument,
    "\n    mutation UploadImage($file: Upload!) {\n        item {\n            uploadImage(file: $file) {\n                id\n                uuid\n                image\n            }\n        }\n    }\n": types.UploadImageDocument,
    "\n    mutation LikeBlogArticle($id: ID!) {\n        customer {\n            likeBlogArticle(id: $id) {\n                article {\n                    id\n                    title\n                    content\n                    published_at\n                    view_count\n                    tags {\n                        id\n                        title\n                    }\n                    category {\n                        id\n                        title\n                        parent\n                    }\n                    image\n                    is_active\n                    is_liked\n                    like_count\n                    is_highlight\n                    slug\n                }\n            }\n        }\n    }\n": types.LikeBlogArticleDocument,
    "\n    query GetAppearance {\n        customer {\n            getAppearance {\n                id\n                theme {\n                    id\n                    name\n                    is_luxury\n                    product_card_type_display\n                    mobile_hot_offer_show\n                    images {\n                        id\n                        image\n                    }\n                    name_display\n                    hot_offer_gradient_type_display\n                    primary_color\n                    second_primary_color\n                    discount_color\n                    hot_offer_gradient_color\n                    hot_offer_gradient_type\n                }\n            }\n        }\n    }\n": types.GetAppearanceDocument,
    "\n    query GetStoreInfo {\n        customer {\n            getStoreInfo {\n                brand\n                id\n                name\n                hotjar_token\n                google_analytics_token\n                store_address {\n                    province\n                    city\n                    address\n                    postal_code\n                    longitude\n                    latitude\n                }\n                logo {\n                    id\n                    image\n                }\n                social_media {\n                    twitter\n                    facebook\n                    linkedin\n                    telegram\n                    whatsapp\n                    instagram\n                }\n                phone_number\n                first_name\n                last_name\n                email\n                ecommerce {\n                    cover {\n                        id\n                        image\n                    }\n                    domain\n                    is_open\n                    about_us\n                    about_returns\n                    shipping_guide\n                    e_namad_reference_link\n                    e_namad_img_src\n                    e_namad_img_id\n                    e_namad_meta_content\n                    show_digify_logo\n                }\n                guild\n                earning {\n                    game_type\n                    value\n                    limit\n                    game_type_display\n                }\n                is_earning_loyalty_active\n                ray_chat_enabled\n                telephone_number\n                tax\n                ray_chat_token\n            }\n        }\n    }\n": types.GetStoreInfoDocument,
    "\n    query GetBasket($uuid: String) {\n        customer {\n            getBasket(uuid: $uuid) {\n                id\n                temp_id\n                basket_items {\n                    product_id\n                    amount\n                    cost\n                    cost_change\n                    discount_amount\n                    has_loyalty\n                    id\n                    image {\n                        id\n                        image\n                    }\n                    is_unlimited\n                    loyalty_gift\n                    max_quantity\n                    online_cost\n                    online_primary_cost\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                    primary_cost\n                    product_label\n                    stock\n                    orderable_count\n                    variant_name\n                    variant_id\n                    tax\n                    single_tax\n                    bonus_value\n                }\n            }\n        }\n    }\n": types.GetBasketDocument,
    "\n    query GetProducts($params: ProductsParams) {\n        customer {\n            getProducts(params: $params) {\n                count\n                next\n                results {\n                    average_score\n                    colors {\n                        color_code\n                        id\n                    }\n                    id\n                    label\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        time_delay\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                        tax\n                        single_tax\n                    }\n                    main_image {\n                        id\n                        image\n                    }\n                    images {\n                        id\n                        image\n                    }\n                    hot_offer_expired_date\n                    has_stock\n                    orderable_count\n                }\n            }\n        }\n    }\n": types.GetProductsDocument,
    "\n    query GetProduct($id: ID!) {\n        customer {\n            getProduct(id: $id) {\n                id\n                label\n                description\n                category {\n                    id\n                    title\n                    parent\n                }\n                variants {\n                    id\n                    cost\n                    stock\n                    orderable_count\n                    images {\n                        id\n                        image\n                    }\n                    time_delay\n                    is_active\n                    is_unlimited\n                    loyalty_gift\n                    cost_expired_at\n                    primary_cost\n                    max_quantity\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                }\n                images {\n                    id\n                    image\n                }\n                tax\n                features {\n                    id\n                    title\n                    description\n                }\n                average_score\n                voter_number\n                chosen_image {\n                    id\n                    image\n                }\n                product_stock\n                feedback_count\n                has_stock\n                profit_percent\n                has_loyalty_gift\n                is_favorite\n            }\n        }\n    }\n": types.GetProductDocument,
    "\n    query GetSuggestionProducts($productId: ID!) {\n        customer {\n            getSuggestionProducts(product_id: $productId) {\n                results {\n                    id\n                    label\n                    orderable_count\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                    }\n                    image {\n                        id\n                        image\n                    }\n                    average_score\n                    has_stock\n                    colors {\n                        id\n                        value\n                        color_code\n                    }\n                }\n            }\n        }\n    }\n": types.GetSuggestionProductsDocument,
    "\n    query GetProductFeedback($productId: ID!, $params: ProductFeedbackParams) {\n        customer {\n            getProductFeedback(product_id: $productId, params: $params) {\n                count\n                next\n                previous\n                results {\n                    score\n                    description\n                    reply\n                    images {\n                        id\n                        uuid\n                        image\n                    }\n                    created_at\n                    first_name\n                    last_name\n                    variant {\n                        option_values {\n                            id\n                            value\n                            option {\n                                id\n                                name\n                                is_color\n                            }\n                            color_code\n                        }\n                        name\n                    }\n                }\n            }\n        }\n    }\n": types.GetProductFeedbackDocument,
    "\n    query ProductFiltering($params: ProductsParams) {\n        customer {\n            productFiltering(params: $params) {\n                available_maximum_cost\n                categories\n                colors\n                has_discount\n                has_stock\n                maximum_cost\n                options {\n                    name\n                    option_values\n                }\n                minimum_cost\n                custom_categories {\n                    title\n                    id\n                    child_categories {\n                        title\n                        id\n                        child_categories {\n                            title\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.ProductFilteringDocument,
    "\n    query GetCategories($params: CategoriesParams) {\n        customer {\n            getCategories(params: $params) {\n                count\n                results {\n                    id\n                    title\n                    image {\n                        id\n                        image\n                    }\n                    children {\n                        id\n                        title\n                        image {\n                            id\n                            image\n                        }\n                        children {\n                            id\n                            title\n                            image {\n                                id\n                                image\n                            }\n                            children {\n                                id\n                                title\n                                image {\n                                    id\n                                    image\n                                }\n                                children {\n                                    id\n                                    title\n                                    image {\n                                        id\n                                        image\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetCategoriesDocument,
    "\n    query GetProfile {\n        customer {\n            getProfile {\n                id\n                phone_number\n                national_code\n                telephone_number\n                card_number\n                birthday\n                marriage_date\n                first_name\n                last_name\n                email\n                granted\n            }\n        }\n    }\n": types.GetProfileDocument,
    "\n    query GetNotificationSetting {\n        customer {\n            getNotificationSetting {\n                id\n                product_available_sms_notify\n                product_available_email_notify\n                product_available_internal_notify\n                hot_offer_available_sms_notify\n                hot_offer_available_email_notify\n                hot_offer_available_internal_notify\n                receive_order_sms_notify\n                receive_order_email_notify\n                receive_order_internal_notify\n                order_invoice_sms_notify\n                order_invoice_email_notify\n                order_invoice_internal_notify\n                return_invoice_sms_notify\n                return_invoice_email_notify\n                return_invoice_internal_notify\n                survey_sms_notify\n                survey_email_notify\n                survey_internal_notify\n            }\n        }\n    }\n": types.GetNotificationSettingDocument,
    "\n    query GetOrders($params: OrdersParams) {\n        customer {\n            getOrdersV3(params: $params) {\n                count\n                next\n                results {\n                    cost\n                    reference_code\n                    created_at\n                    id\n                    items {\n                        details {\n                            variant {\n                                product_serialized {\n                                    label\n                                    images {\n                                        id\n                                        image\n                                    }\n                                    id\n                                }\n                            }\n                        }\n                    }\n                    status\n                    previous_status\n                    expired_at\n                    approximate_sending_date {\n                        start\n                        end\n                    }\n                    owner_card_name\n                    received_at\n                    registration_type\n                    returns {\n                        id\n                        status\n                        reference_code\n                        created_at\n                    }\n                    shipping_time_count\n                    owner_card_number\n                    approximate_sending_date {\n                        start\n                        end\n                    }\n                    is_finished\n                    received_by_customer\n                    cancellation_reason\n                    shipping {\n                        name\n                    }\n                }\n            }\n        }\n    }\n": types.GetOrdersDocument,
    "\n    query GetOrder($orderId: ID!) {\n        customer {\n            getOrderV3(id: $orderId) {\n                address {\n                    address\n                }\n                cost\n                created_at\n                received_at\n                registration_type\n                order_description\n                shipping_time_count\n                receiver_name\n                receiver_number\n                receiver_last_name\n                loyalty_amount\n                total_discount_cost\n                pocket_cost\n                tax\n                status\n                previous_status\n                expired_at\n                approximate_sending_date {\n                    start\n                    end\n                }\n                pocket {\n                    name\n                }\n                shipping {\n                    name\n                }\n                post_tracking_number\n                reference_code\n                customer_shipping_cost\n                cancellation_reason\n                owner_card_name\n                owner_card_number\n                id\n                is_finished\n                received_by_customer\n                can_return_request\n                items {\n                    id\n                    details {\n                        variant {\n                            cost\n                            cost_expired_at\n                            id\n                            images {\n                                id\n                                image\n                            }\n                            is_return\n                            name\n                            online_cost\n                            online_primary_cost\n                            option_values {\n                                value\n                                option {\n                                    name\n                                    is_color\n                                }\n                                color_code\n                            }\n                            primary_cost\n                            time_delay\n                            product_serialized {\n                                id\n                                label\n                                images {\n                                    id\n                                    image\n                                }\n                            }\n                        }\n                    }\n                    single_cost\n                    unit_amount\n                }\n            }\n        }\n    }\n": types.GetOrderDocument,
    "\n    query GetReturnedOrder($orderId: ID!) {\n        customer {\n            getReturnedOrder(id: $orderId) {\n                id\n                status\n                reference_code\n                order_reference_code\n                created_at\n                status_display\n                first_name\n                order_created_at\n                last_name\n                phone_number\n                card_number\n                total_returned_cost\n                items {\n                    id\n                    status_display\n                    status\n                    reason\n                    returned_cost\n                    count\n                    description\n                    reply_reason\n                    reply_description\n                    relative_voucher_amount\n                    images {\n                        id\n                        uuid\n                        image\n                    }\n                    order_item {\n                        id\n                        single_cost\n                        single_primary_cost\n                        single_tax\n                        single_profit\n                        product_label\n                        details {\n                            variant {\n                                id\n                                cost\n                                name\n                                images {\n                                    id\n                                    uuid\n                                    image\n                                }\n                                status\n                                online_primary_cost\n                                primary_cost\n                                product_serialized {\n                                    name\n                                    id\n                                    label\n                                    images {\n                                        id\n                                        uuid\n                                        image\n                                    }\n                                }\n                                online_cost\n                                option_values {\n                                    id\n                                    value\n                                    color_code\n                                    option {\n                                        id\n                                        name\n                                        is_color\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetReturnedOrderDocument,
    "\n    query GetOrdersStatusCount {\n        customer {\n            getOrderStatusCount: getOrders {\n                returns_count\n                status_count {\n                    status\n                    total\n                }\n            }\n        }\n    }\n": types.GetOrdersStatusCountDocument,
    "\n    query GetBreadcrumb($params: BreadcrumbParams) {\n        customer {\n            getBreadcrumb(params: $params) {\n                id\n                title\n                image {\n                    id\n                    image\n                }\n                child {\n                    id\n                    title\n                    image {\n                        id\n                        image\n                    }\n                    child {\n                        id\n                        title\n                        image {\n                            id\n                            image\n                        }\n                        child {\n                            id\n                            title\n                            image {\n                                id\n                                image\n                            }\n                            child {\n                                id\n                                title\n                                image {\n                                    id\n                                    image\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetBreadcrumbDocument,
    "\n    query GetAddresses {\n        customer {\n            getAddresses {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n": types.GetAddressesDocument,
    "\n    query getShippingAddresses($addressId: ID!) {\n        customer {\n            getShippingAddresses(address_id: $addressId) {\n                cost\n                id\n                name\n                shipping_delay\n                shipping_type\n                shipping_type_display\n                time_sending\n            }\n        }\n    }\n": types.GetShippingAddressesDocument,
    "\n    query GetPocket {\n        customer {\n            getPocket {\n                cost\n                id\n                is_active\n                name\n            }\n        }\n    }\n": types.GetPocketDocument,
    "\n    query GetLoyaltyCredit {\n        customer {\n            getLoyaltyCreditV2 {\n                loyalty_credit\n            }\n        }\n    }\n": types.GetLoyaltyCreditDocument,
    "\n    query GetFavorites($params: FavoritesParams) {\n        customer {\n            getFavoritesV2(params: $params) {\n                count\n                next\n                results {\n                    average_score\n                    colors {\n                        color_code\n                        id\n                    }\n                    id\n                    label\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        time_delay\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                    }\n                    main_image {\n                        id\n                        image\n                    }\n                    images {\n                        id\n                        image\n                    }\n                    hot_offer_expired_date\n                    has_stock\n                    orderable_count\n                }\n            }\n        }\n    }\n": types.GetFavoritesDocument,
    "\n    query IsFavorite($id: ID!) {\n        customer {\n            isFavorite(id: $id) {\n                is_favorite\n            }\n        }\n    }\n": types.IsFavoriteDocument,
    "\n    query GetTransactionTypes {\n        customer {\n            getTransactionTypes {\n                gateway_type\n                persian_gateway_type\n            }\n        }\n    }\n": types.GetTransactionTypesDocument,
    "\n    query GetLoyaltyLogs($params: LoyaltyLogsParams) {\n        customer {\n            getLoyaltyLogs(params: $params) {\n                count\n                next\n                results {\n                    account_credit\n                    amount\n                    created_at\n                    data {\n                        game\n                    }\n                    id\n                    log_type_display\n                    order_cost\n                    reason\n                }\n            }\n        }\n    }\n": types.GetLoyaltyLogsDocument,
    "\n    query getApproximateSendingDate($addressId: ID!, $id: ID!) {\n        customer {\n            getShippingAddress(address_id: $addressId, id: $id) {\n                approximate_sending_date {\n                    start\n                    end\n                }\n            }\n        }\n    }\n": types.GetApproximateSendingDateDocument,
    "\n    query GetThemeCustomization($themeName: String) {\n        customer {\n            getThemeCustomization(themeName: $themeName) {\n                id\n                data\n            }\n        }\n    }\n": types.GetThemeCustomizationDocument,
    "\n    query GetUserType {\n        customer {\n            getUserType {\n                type\n            }\n        }\n    }\n": types.GetUserTypeDocument,
    "\n    query GetVariantsStock($ids: [ID!]!) {\n        customer {\n            getVariantsStock(ids: $ids) {\n                id\n                orderable_count\n            }\n        }\n    }\n": types.GetVariantsStockDocument,
    "\n    query GetBlogArticles($params: blogArticlesParams) {\n        customer {\n            getBlogArticles(params: $params) {\n                count\n                next\n                previous\n                results {\n                    id\n                    title\n                    content\n                    published_at\n                    view_count\n                    like_count\n                    tags {\n                        id\n                        title\n                    }\n                    category {\n                        id\n                        title\n                        parent\n                    }\n                    image\n                    is_active\n                    is_liked\n                    is_highlight\n                    slug\n                }\n            }\n        }\n    }\n": types.GetBlogArticlesDocument,
    "\n    query GetBlogHighlights($params: blogHighlightsParams) {\n        customer {\n            getBlogHighlights(params: $params) {\n                count\n                next\n                previous\n                results {\n                    id\n                    article {\n                        id\n                        title\n                        image\n                        slug\n                    }\n                }\n            }\n        }\n    }\n": types.GetBlogHighlightsDocument,
    "\n    query GetBlogArticle($id: ID!) {\n        customer {\n            getBlogArticle(id: $id) {\n                id\n                title\n                content\n                published_at\n                view_count\n                tags {\n                    id\n                    title\n                }\n                category {\n                    id\n                    title\n                    parent\n                }\n                image\n                is_active\n                is_liked\n                like_count\n                is_highlight\n                slug\n            }\n        }\n    }\n": types.GetBlogArticleDocument,
    "\n    query getSitemap {\n        customer {\n            getSitemap\n        }\n    }\n": types.GetSitemapDocument,
    "\n    query GetTokenPanel {\n        notification {\n            getToken {\n                token\n            }\n        }\n    }\n": types.GetTokenPanelDocument,
    "\n    query getShippingSokect($addressId: ID!) {\n        customer {\n            getShippingSokect(address_id: $addressId) {\n                cost\n                id\n                name\n                shipping_delay\n                shipping_type\n                shipping_type_display\n                time_sending\n            }\n        }\n    }\n": types.GetShippingSokectDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation GetCookie($content: TokenContent!) {\n        user {\n            getCookie(content: $content) {\n                access\n                refresh\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation GetCookie($content: TokenContent!) {\n        user {\n            getCookie(content: $content) {\n                access\n                refresh\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation GetToken($content: TokenContent!) {\n        user {\n            getToken(content: $content) {\n                access\n                refresh\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation GetToken($content: TokenContent!) {\n        user {\n            getToken(content: $content) {\n                access\n                refresh\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation GetRefreshToken($content: RefreshTokenContent!) {\n        user {\n            getRefreshToken(content: $content) {\n                access\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation GetRefreshToken($content: RefreshTokenContent!) {\n        user {\n            getRefreshToken(content: $content) {\n                access\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateProfile($content: ProfileContent) {\n        customer {\n            createProfile(content: $content) {\n                first_name\n                last_name\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateProfile($content: ProfileContent) {\n        customer {\n            createProfile(content: $content) {\n                first_name\n                last_name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation OtpSend($content: OTPSendContent) {\n        customer {\n            otpSend(content: $content)\n        }\n    }\n"): (typeof documents)["\n    mutation OtpSend($content: OTPSendContent) {\n        customer {\n            otpSend(content: $content)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation OtpSendV2($content: OTPSendContent) {\n        customer {\n            otpSendV2(content: $content) {\n                is_forget_password\n                is_register\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation OtpSendV2($content: OTPSendContent) {\n        customer {\n            otpSendV2(content: $content) {\n                is_forget_password\n                is_register\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation otpSendSignup($content: GetTokenByOTPSingUpContent) {\n        customer {\n            otpSendSignup(content: $content) {\n                refresh\n                access\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation otpSendSignup($content: GetTokenByOTPSingUpContent) {\n        customer {\n            otpSendSignup(content: $content) {\n                refresh\n                access\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation GetChangePasswordAuth($content: GetTokenByOTPContent) {\n        customer {\n            getChangePasswordAuth(content: $content) {\n                auth\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation GetChangePasswordAuth($content: GetTokenByOTPContent) {\n        customer {\n            getChangePasswordAuth(content: $content) {\n                auth\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ForgetPassword($content: ForgetPasswordContent) {\n        customer {\n            forgetPassword(content: $content)\n        }\n    }\n"): (typeof documents)["\n    mutation ForgetPassword($content: ForgetPasswordContent) {\n        customer {\n            forgetPassword(content: $content)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ChangePasswordWithoutOtp($content: ChangePasswordWithoutOtpContent) {\n        customer {\n            changePasswordWithoutOtp(content: $content)\n        }\n    }\n"): (typeof documents)["\n    mutation ChangePasswordWithoutOtp($content: ChangePasswordWithoutOtpContent) {\n        customer {\n            changePasswordWithoutOtp(content: $content)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateNotificationSetting($content: NotificationSettingContent) {\n        customer {\n            updateNotificationSetting(content: $content) {\n                hot_offer_available_email_notify\n                id\n                product_available_sms_notify\n                product_available_email_notify\n                product_available_internal_notify\n                hot_offer_available_sms_notify\n                hot_offer_available_internal_notify\n                receive_order_sms_notify\n                receive_order_email_notify\n                receive_order_internal_notify\n                order_invoice_sms_notify\n                order_invoice_email_notify\n                order_invoice_internal_notify\n                return_invoice_sms_notify\n                return_invoice_email_notify\n                return_invoice_internal_notify\n                survey_sms_notify\n                survey_email_notify\n                survey_internal_notify\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateNotificationSetting($content: NotificationSettingContent) {\n        customer {\n            updateNotificationSetting(content: $content) {\n                hot_offer_available_email_notify\n                id\n                product_available_sms_notify\n                product_available_email_notify\n                product_available_internal_notify\n                hot_offer_available_sms_notify\n                hot_offer_available_internal_notify\n                receive_order_sms_notify\n                receive_order_email_notify\n                receive_order_internal_notify\n                order_invoice_sms_notify\n                order_invoice_email_notify\n                order_invoice_internal_notify\n                return_invoice_sms_notify\n                return_invoice_email_notify\n                return_invoice_internal_notify\n                survey_sms_notify\n                survey_email_notify\n                survey_internal_notify\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateProfile($content: ProfileContent) {\n        customer {\n            updateProfile(content: $content) {\n                id\n                phone_number\n                national_code\n                telephone_number\n                sheba_number\n                card_number\n                birthday\n                gender\n                marriage_date\n                first_name\n                last_name\n                email\n                gender_display\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateProfile($content: ProfileContent) {\n        customer {\n            updateProfile(content: $content) {\n                id\n                phone_number\n                national_code\n                telephone_number\n                sheba_number\n                card_number\n                birthday\n                gender\n                marriage_date\n                first_name\n                last_name\n                email\n                gender_display\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PaymentCard($orderId: ID!, $image: Upload!) {\n        customer {\n            paymentCard(orderId: $orderId, image: $image)\n        }\n    }\n"): (typeof documents)["\n    mutation PaymentCard($orderId: ID!, $image: Upload!) {\n        customer {\n            paymentCard(orderId: $orderId, image: $image)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateBasket($uuid: String, $content: UpdateBasketContent) {\n        customer {\n            updateBasket(content: $content, uuid: $uuid) {\n                id\n                temp_id\n                basket_items {\n                    product_id\n                    amount\n                    cost\n                    cost_change\n                    discount_amount\n                    has_loyalty\n                    id\n                    image {\n                        id\n                        image\n                    }\n                    is_unlimited\n                    loyalty_gift\n                    max_quantity\n                    online_cost\n                    online_primary_cost\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                    primary_cost\n                    product_label\n                    stock\n                    orderable_count\n                    variant_name\n                    variant_id\n                    tax\n                    single_tax\n                    bonus_value\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateBasket($uuid: String, $content: UpdateBasketContent) {\n        customer {\n            updateBasket(content: $content, uuid: $uuid) {\n                id\n                temp_id\n                basket_items {\n                    product_id\n                    amount\n                    cost\n                    cost_change\n                    discount_amount\n                    has_loyalty\n                    id\n                    image {\n                        id\n                        image\n                    }\n                    is_unlimited\n                    loyalty_gift\n                    max_quantity\n                    online_cost\n                    online_primary_cost\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                    primary_cost\n                    product_label\n                    stock\n                    orderable_count\n                    variant_name\n                    variant_id\n                    tax\n                    single_tax\n                    bonus_value\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation VoucherCheck($content: VoucherCheckContent!) {\n        customer: promotion {\n            voucherCheck(content: $content) {\n                amount\n                code\n                expire_date\n                id\n                limit\n                start_date\n                voucher_type\n                voucher_type_display\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation VoucherCheck($content: VoucherCheckContent!) {\n        customer: promotion {\n            voucherCheck(content: $content) {\n                amount\n                code\n                expire_date\n                id\n                limit\n                start_date\n                voucher_type\n                voucher_type_display\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RemoveFavorite($id: ID!) {\n        customer {\n            removeFavorite(id: $id)\n        }\n    }\n"): (typeof documents)["\n    mutation RemoveFavorite($id: ID!) {\n        customer {\n            removeFavorite(id: $id)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddFavorite($id: ID!) {\n        customer {\n            addFavorite(id: $id)\n        }\n    }\n"): (typeof documents)["\n    mutation AddFavorite($id: ID!) {\n        customer {\n            addFavorite(id: $id)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateOrder($content: CreateOrderContent) {\n        customer {\n            createOrder(content: $content) {\n                id\n                gateway_link\n                transaction_type\n                registration_type\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateOrder($content: CreateOrderContent) {\n        customer {\n            createOrder(content: $content) {\n                id\n                gateway_link\n                transaction_type\n                registration_type\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteAddress($id: ID!) {\n        customer {\n            deleteAddress(id: $id)\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteAddress($id: ID!) {\n        customer {\n            deleteAddress(id: $id)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateAddress($content: AddressContent) {\n        customer {\n            createAddress(content: $content) {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateAddress($content: AddressContent) {\n        customer {\n            createAddress(content: $content) {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PartialUpdateAddress($id: ID!, $content: AddressContent) {\n        customer {\n            partialUpdateAddress(id: $id, content: $content) {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation PartialUpdateAddress($id: ID!, $content: AddressContent) {\n        customer {\n            partialUpdateAddress(id: $id, content: $content) {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation GetGateway($id: ID, $content: GatewayLinkUrlContent!) {\n        customer {\n            getGateway(id: $id, content: $content) {\n                gateway_link\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation GetGateway($id: ID, $content: GatewayLinkUrlContent!) {\n        customer {\n            getGateway(id: $id, content: $content) {\n                gateway_link\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ClearCookie {\n        user {\n            clearCookie\n        }\n    }\n"): (typeof documents)["\n    mutation ClearCookie {\n        user {\n            clearCookie\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CancelOrder($id: ID!) {\n        customer {\n            cancelOrder(id: $id)\n        }\n    }\n"): (typeof documents)["\n    mutation CancelOrder($id: ID!) {\n        customer {\n            cancelOrder(id: $id)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateReceiveStatus($orderId: ID!, $content: UpdateReceiveStatusContent!) {\n        customer {\n            updateReceiveStatus(id: $orderId, content: $content)\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateReceiveStatus($orderId: ID!, $content: UpdateReceiveStatusContent!) {\n        customer {\n            updateReceiveStatus(id: $orderId, content: $content)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ReturnOrder($content: ReturnOrderContent) {\n        customer {\n            returnOrder(content: $content) {\n                id\n                status\n                reference_code\n                order_reference_code\n                created_at\n                items {\n                    id\n                    status_display\n                    reason\n                    returned_cost\n                    count\n                    description\n                    reply_reason\n                    reply_description\n                    relative_voucher_amount\n                }\n                status_display\n                order_created_at\n                first_name\n                last_name\n                phone_number\n                card_number\n                total_returned_cost\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation ReturnOrder($content: ReturnOrderContent) {\n        customer {\n            returnOrder(content: $content) {\n                id\n                status\n                reference_code\n                order_reference_code\n                created_at\n                items {\n                    id\n                    status_display\n                    reason\n                    returned_cost\n                    count\n                    description\n                    reply_reason\n                    reply_description\n                    relative_voucher_amount\n                }\n                status_display\n                order_created_at\n                first_name\n                last_name\n                phone_number\n                card_number\n                total_returned_cost\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateThemeCustomization($themeName: String, $data: JSON) {\n        customer {\n            updateThemeCustomization(themeName: $themeName, data: $data) {\n                id\n                data\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateThemeCustomization($themeName: String, $data: JSON) {\n        customer {\n            updateThemeCustomization(themeName: $themeName, data: $data) {\n                id\n                data\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateThemeCustomization($themeName: String, $data: JSON) {\n        customer {\n            createThemeCustomization(themeName: $themeName, data: $data) {\n                id\n                data\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateThemeCustomization($themeName: String, $data: JSON) {\n        customer {\n            createThemeCustomization(themeName: $themeName, data: $data) {\n                id\n                data\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateStoreOpeningNotifier($content: CreateStoreOpeningNotifierContent) {\n        customer {\n            createStoreOpeningNotifier(content: $content)\n        }\n    }\n"): (typeof documents)["\n    mutation CreateStoreOpeningNotifier($content: CreateStoreOpeningNotifierContent) {\n        customer {\n            createStoreOpeningNotifier(content: $content)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadImage($file: Upload!) {\n        item {\n            uploadImage(file: $file) {\n                id\n                uuid\n                image\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UploadImage($file: Upload!) {\n        item {\n            uploadImage(file: $file) {\n                id\n                uuid\n                image\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LikeBlogArticle($id: ID!) {\n        customer {\n            likeBlogArticle(id: $id) {\n                article {\n                    id\n                    title\n                    content\n                    published_at\n                    view_count\n                    tags {\n                        id\n                        title\n                    }\n                    category {\n                        id\n                        title\n                        parent\n                    }\n                    image\n                    is_active\n                    is_liked\n                    like_count\n                    is_highlight\n                    slug\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation LikeBlogArticle($id: ID!) {\n        customer {\n            likeBlogArticle(id: $id) {\n                article {\n                    id\n                    title\n                    content\n                    published_at\n                    view_count\n                    tags {\n                        id\n                        title\n                    }\n                    category {\n                        id\n                        title\n                        parent\n                    }\n                    image\n                    is_active\n                    is_liked\n                    like_count\n                    is_highlight\n                    slug\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAppearance {\n        customer {\n            getAppearance {\n                id\n                theme {\n                    id\n                    name\n                    is_luxury\n                    product_card_type_display\n                    mobile_hot_offer_show\n                    images {\n                        id\n                        image\n                    }\n                    name_display\n                    hot_offer_gradient_type_display\n                    primary_color\n                    second_primary_color\n                    discount_color\n                    hot_offer_gradient_color\n                    hot_offer_gradient_type\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAppearance {\n        customer {\n            getAppearance {\n                id\n                theme {\n                    id\n                    name\n                    is_luxury\n                    product_card_type_display\n                    mobile_hot_offer_show\n                    images {\n                        id\n                        image\n                    }\n                    name_display\n                    hot_offer_gradient_type_display\n                    primary_color\n                    second_primary_color\n                    discount_color\n                    hot_offer_gradient_color\n                    hot_offer_gradient_type\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetStoreInfo {\n        customer {\n            getStoreInfo {\n                brand\n                id\n                name\n                hotjar_token\n                google_analytics_token\n                store_address {\n                    province\n                    city\n                    address\n                    postal_code\n                    longitude\n                    latitude\n                }\n                logo {\n                    id\n                    image\n                }\n                social_media {\n                    twitter\n                    facebook\n                    linkedin\n                    telegram\n                    whatsapp\n                    instagram\n                }\n                phone_number\n                first_name\n                last_name\n                email\n                ecommerce {\n                    cover {\n                        id\n                        image\n                    }\n                    domain\n                    is_open\n                    about_us\n                    about_returns\n                    shipping_guide\n                    e_namad_reference_link\n                    e_namad_img_src\n                    e_namad_img_id\n                    e_namad_meta_content\n                    show_digify_logo\n                }\n                guild\n                earning {\n                    game_type\n                    value\n                    limit\n                    game_type_display\n                }\n                is_earning_loyalty_active\n                ray_chat_enabled\n                telephone_number\n                tax\n                ray_chat_token\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetStoreInfo {\n        customer {\n            getStoreInfo {\n                brand\n                id\n                name\n                hotjar_token\n                google_analytics_token\n                store_address {\n                    province\n                    city\n                    address\n                    postal_code\n                    longitude\n                    latitude\n                }\n                logo {\n                    id\n                    image\n                }\n                social_media {\n                    twitter\n                    facebook\n                    linkedin\n                    telegram\n                    whatsapp\n                    instagram\n                }\n                phone_number\n                first_name\n                last_name\n                email\n                ecommerce {\n                    cover {\n                        id\n                        image\n                    }\n                    domain\n                    is_open\n                    about_us\n                    about_returns\n                    shipping_guide\n                    e_namad_reference_link\n                    e_namad_img_src\n                    e_namad_img_id\n                    e_namad_meta_content\n                    show_digify_logo\n                }\n                guild\n                earning {\n                    game_type\n                    value\n                    limit\n                    game_type_display\n                }\n                is_earning_loyalty_active\n                ray_chat_enabled\n                telephone_number\n                tax\n                ray_chat_token\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBasket($uuid: String) {\n        customer {\n            getBasket(uuid: $uuid) {\n                id\n                temp_id\n                basket_items {\n                    product_id\n                    amount\n                    cost\n                    cost_change\n                    discount_amount\n                    has_loyalty\n                    id\n                    image {\n                        id\n                        image\n                    }\n                    is_unlimited\n                    loyalty_gift\n                    max_quantity\n                    online_cost\n                    online_primary_cost\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                    primary_cost\n                    product_label\n                    stock\n                    orderable_count\n                    variant_name\n                    variant_id\n                    tax\n                    single_tax\n                    bonus_value\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetBasket($uuid: String) {\n        customer {\n            getBasket(uuid: $uuid) {\n                id\n                temp_id\n                basket_items {\n                    product_id\n                    amount\n                    cost\n                    cost_change\n                    discount_amount\n                    has_loyalty\n                    id\n                    image {\n                        id\n                        image\n                    }\n                    is_unlimited\n                    loyalty_gift\n                    max_quantity\n                    online_cost\n                    online_primary_cost\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                    primary_cost\n                    product_label\n                    stock\n                    orderable_count\n                    variant_name\n                    variant_id\n                    tax\n                    single_tax\n                    bonus_value\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetProducts($params: ProductsParams) {\n        customer {\n            getProducts(params: $params) {\n                count\n                next\n                results {\n                    average_score\n                    colors {\n                        color_code\n                        id\n                    }\n                    id\n                    label\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        time_delay\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                        tax\n                        single_tax\n                    }\n                    main_image {\n                        id\n                        image\n                    }\n                    images {\n                        id\n                        image\n                    }\n                    hot_offer_expired_date\n                    has_stock\n                    orderable_count\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetProducts($params: ProductsParams) {\n        customer {\n            getProducts(params: $params) {\n                count\n                next\n                results {\n                    average_score\n                    colors {\n                        color_code\n                        id\n                    }\n                    id\n                    label\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        time_delay\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                        tax\n                        single_tax\n                    }\n                    main_image {\n                        id\n                        image\n                    }\n                    images {\n                        id\n                        image\n                    }\n                    hot_offer_expired_date\n                    has_stock\n                    orderable_count\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetProduct($id: ID!) {\n        customer {\n            getProduct(id: $id) {\n                id\n                label\n                description\n                category {\n                    id\n                    title\n                    parent\n                }\n                variants {\n                    id\n                    cost\n                    stock\n                    orderable_count\n                    images {\n                        id\n                        image\n                    }\n                    time_delay\n                    is_active\n                    is_unlimited\n                    loyalty_gift\n                    cost_expired_at\n                    primary_cost\n                    max_quantity\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                }\n                images {\n                    id\n                    image\n                }\n                tax\n                features {\n                    id\n                    title\n                    description\n                }\n                average_score\n                voter_number\n                chosen_image {\n                    id\n                    image\n                }\n                product_stock\n                feedback_count\n                has_stock\n                profit_percent\n                has_loyalty_gift\n                is_favorite\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetProduct($id: ID!) {\n        customer {\n            getProduct(id: $id) {\n                id\n                label\n                description\n                category {\n                    id\n                    title\n                    parent\n                }\n                variants {\n                    id\n                    cost\n                    stock\n                    orderable_count\n                    images {\n                        id\n                        image\n                    }\n                    time_delay\n                    is_active\n                    is_unlimited\n                    loyalty_gift\n                    cost_expired_at\n                    primary_cost\n                    max_quantity\n                    option_values {\n                        id\n                        value\n                        option {\n                            id\n                            name\n                            is_color\n                        }\n                        color_code\n                    }\n                }\n                images {\n                    id\n                    image\n                }\n                tax\n                features {\n                    id\n                    title\n                    description\n                }\n                average_score\n                voter_number\n                chosen_image {\n                    id\n                    image\n                }\n                product_stock\n                feedback_count\n                has_stock\n                profit_percent\n                has_loyalty_gift\n                is_favorite\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetSuggestionProducts($productId: ID!) {\n        customer {\n            getSuggestionProducts(product_id: $productId) {\n                results {\n                    id\n                    label\n                    orderable_count\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                    }\n                    image {\n                        id\n                        image\n                    }\n                    average_score\n                    has_stock\n                    colors {\n                        id\n                        value\n                        color_code\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetSuggestionProducts($productId: ID!) {\n        customer {\n            getSuggestionProducts(product_id: $productId) {\n                results {\n                    id\n                    label\n                    orderable_count\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                    }\n                    image {\n                        id\n                        image\n                    }\n                    average_score\n                    has_stock\n                    colors {\n                        id\n                        value\n                        color_code\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetProductFeedback($productId: ID!, $params: ProductFeedbackParams) {\n        customer {\n            getProductFeedback(product_id: $productId, params: $params) {\n                count\n                next\n                previous\n                results {\n                    score\n                    description\n                    reply\n                    images {\n                        id\n                        uuid\n                        image\n                    }\n                    created_at\n                    first_name\n                    last_name\n                    variant {\n                        option_values {\n                            id\n                            value\n                            option {\n                                id\n                                name\n                                is_color\n                            }\n                            color_code\n                        }\n                        name\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetProductFeedback($productId: ID!, $params: ProductFeedbackParams) {\n        customer {\n            getProductFeedback(product_id: $productId, params: $params) {\n                count\n                next\n                previous\n                results {\n                    score\n                    description\n                    reply\n                    images {\n                        id\n                        uuid\n                        image\n                    }\n                    created_at\n                    first_name\n                    last_name\n                    variant {\n                        option_values {\n                            id\n                            value\n                            option {\n                                id\n                                name\n                                is_color\n                            }\n                            color_code\n                        }\n                        name\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ProductFiltering($params: ProductsParams) {\n        customer {\n            productFiltering(params: $params) {\n                available_maximum_cost\n                categories\n                colors\n                has_discount\n                has_stock\n                maximum_cost\n                options {\n                    name\n                    option_values\n                }\n                minimum_cost\n                custom_categories {\n                    title\n                    id\n                    child_categories {\n                        title\n                        id\n                        child_categories {\n                            title\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query ProductFiltering($params: ProductsParams) {\n        customer {\n            productFiltering(params: $params) {\n                available_maximum_cost\n                categories\n                colors\n                has_discount\n                has_stock\n                maximum_cost\n                options {\n                    name\n                    option_values\n                }\n                minimum_cost\n                custom_categories {\n                    title\n                    id\n                    child_categories {\n                        title\n                        id\n                        child_categories {\n                            title\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetCategories($params: CategoriesParams) {\n        customer {\n            getCategories(params: $params) {\n                count\n                results {\n                    id\n                    title\n                    image {\n                        id\n                        image\n                    }\n                    children {\n                        id\n                        title\n                        image {\n                            id\n                            image\n                        }\n                        children {\n                            id\n                            title\n                            image {\n                                id\n                                image\n                            }\n                            children {\n                                id\n                                title\n                                image {\n                                    id\n                                    image\n                                }\n                                children {\n                                    id\n                                    title\n                                    image {\n                                        id\n                                        image\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCategories($params: CategoriesParams) {\n        customer {\n            getCategories(params: $params) {\n                count\n                results {\n                    id\n                    title\n                    image {\n                        id\n                        image\n                    }\n                    children {\n                        id\n                        title\n                        image {\n                            id\n                            image\n                        }\n                        children {\n                            id\n                            title\n                            image {\n                                id\n                                image\n                            }\n                            children {\n                                id\n                                title\n                                image {\n                                    id\n                                    image\n                                }\n                                children {\n                                    id\n                                    title\n                                    image {\n                                        id\n                                        image\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetProfile {\n        customer {\n            getProfile {\n                id\n                phone_number\n                national_code\n                telephone_number\n                card_number\n                birthday\n                marriage_date\n                first_name\n                last_name\n                email\n                granted\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetProfile {\n        customer {\n            getProfile {\n                id\n                phone_number\n                national_code\n                telephone_number\n                card_number\n                birthday\n                marriage_date\n                first_name\n                last_name\n                email\n                granted\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetNotificationSetting {\n        customer {\n            getNotificationSetting {\n                id\n                product_available_sms_notify\n                product_available_email_notify\n                product_available_internal_notify\n                hot_offer_available_sms_notify\n                hot_offer_available_email_notify\n                hot_offer_available_internal_notify\n                receive_order_sms_notify\n                receive_order_email_notify\n                receive_order_internal_notify\n                order_invoice_sms_notify\n                order_invoice_email_notify\n                order_invoice_internal_notify\n                return_invoice_sms_notify\n                return_invoice_email_notify\n                return_invoice_internal_notify\n                survey_sms_notify\n                survey_email_notify\n                survey_internal_notify\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetNotificationSetting {\n        customer {\n            getNotificationSetting {\n                id\n                product_available_sms_notify\n                product_available_email_notify\n                product_available_internal_notify\n                hot_offer_available_sms_notify\n                hot_offer_available_email_notify\n                hot_offer_available_internal_notify\n                receive_order_sms_notify\n                receive_order_email_notify\n                receive_order_internal_notify\n                order_invoice_sms_notify\n                order_invoice_email_notify\n                order_invoice_internal_notify\n                return_invoice_sms_notify\n                return_invoice_email_notify\n                return_invoice_internal_notify\n                survey_sms_notify\n                survey_email_notify\n                survey_internal_notify\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOrders($params: OrdersParams) {\n        customer {\n            getOrdersV3(params: $params) {\n                count\n                next\n                results {\n                    cost\n                    reference_code\n                    created_at\n                    id\n                    items {\n                        details {\n                            variant {\n                                product_serialized {\n                                    label\n                                    images {\n                                        id\n                                        image\n                                    }\n                                    id\n                                }\n                            }\n                        }\n                    }\n                    status\n                    previous_status\n                    expired_at\n                    approximate_sending_date {\n                        start\n                        end\n                    }\n                    owner_card_name\n                    received_at\n                    registration_type\n                    returns {\n                        id\n                        status\n                        reference_code\n                        created_at\n                    }\n                    shipping_time_count\n                    owner_card_number\n                    approximate_sending_date {\n                        start\n                        end\n                    }\n                    is_finished\n                    received_by_customer\n                    cancellation_reason\n                    shipping {\n                        name\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetOrders($params: OrdersParams) {\n        customer {\n            getOrdersV3(params: $params) {\n                count\n                next\n                results {\n                    cost\n                    reference_code\n                    created_at\n                    id\n                    items {\n                        details {\n                            variant {\n                                product_serialized {\n                                    label\n                                    images {\n                                        id\n                                        image\n                                    }\n                                    id\n                                }\n                            }\n                        }\n                    }\n                    status\n                    previous_status\n                    expired_at\n                    approximate_sending_date {\n                        start\n                        end\n                    }\n                    owner_card_name\n                    received_at\n                    registration_type\n                    returns {\n                        id\n                        status\n                        reference_code\n                        created_at\n                    }\n                    shipping_time_count\n                    owner_card_number\n                    approximate_sending_date {\n                        start\n                        end\n                    }\n                    is_finished\n                    received_by_customer\n                    cancellation_reason\n                    shipping {\n                        name\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOrder($orderId: ID!) {\n        customer {\n            getOrderV3(id: $orderId) {\n                address {\n                    address\n                }\n                cost\n                created_at\n                received_at\n                registration_type\n                order_description\n                shipping_time_count\n                receiver_name\n                receiver_number\n                receiver_last_name\n                loyalty_amount\n                total_discount_cost\n                pocket_cost\n                tax\n                status\n                previous_status\n                expired_at\n                approximate_sending_date {\n                    start\n                    end\n                }\n                pocket {\n                    name\n                }\n                shipping {\n                    name\n                }\n                post_tracking_number\n                reference_code\n                customer_shipping_cost\n                cancellation_reason\n                owner_card_name\n                owner_card_number\n                id\n                is_finished\n                received_by_customer\n                can_return_request\n                items {\n                    id\n                    details {\n                        variant {\n                            cost\n                            cost_expired_at\n                            id\n                            images {\n                                id\n                                image\n                            }\n                            is_return\n                            name\n                            online_cost\n                            online_primary_cost\n                            option_values {\n                                value\n                                option {\n                                    name\n                                    is_color\n                                }\n                                color_code\n                            }\n                            primary_cost\n                            time_delay\n                            product_serialized {\n                                id\n                                label\n                                images {\n                                    id\n                                    image\n                                }\n                            }\n                        }\n                    }\n                    single_cost\n                    unit_amount\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetOrder($orderId: ID!) {\n        customer {\n            getOrderV3(id: $orderId) {\n                address {\n                    address\n                }\n                cost\n                created_at\n                received_at\n                registration_type\n                order_description\n                shipping_time_count\n                receiver_name\n                receiver_number\n                receiver_last_name\n                loyalty_amount\n                total_discount_cost\n                pocket_cost\n                tax\n                status\n                previous_status\n                expired_at\n                approximate_sending_date {\n                    start\n                    end\n                }\n                pocket {\n                    name\n                }\n                shipping {\n                    name\n                }\n                post_tracking_number\n                reference_code\n                customer_shipping_cost\n                cancellation_reason\n                owner_card_name\n                owner_card_number\n                id\n                is_finished\n                received_by_customer\n                can_return_request\n                items {\n                    id\n                    details {\n                        variant {\n                            cost\n                            cost_expired_at\n                            id\n                            images {\n                                id\n                                image\n                            }\n                            is_return\n                            name\n                            online_cost\n                            online_primary_cost\n                            option_values {\n                                value\n                                option {\n                                    name\n                                    is_color\n                                }\n                                color_code\n                            }\n                            primary_cost\n                            time_delay\n                            product_serialized {\n                                id\n                                label\n                                images {\n                                    id\n                                    image\n                                }\n                            }\n                        }\n                    }\n                    single_cost\n                    unit_amount\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetReturnedOrder($orderId: ID!) {\n        customer {\n            getReturnedOrder(id: $orderId) {\n                id\n                status\n                reference_code\n                order_reference_code\n                created_at\n                status_display\n                first_name\n                order_created_at\n                last_name\n                phone_number\n                card_number\n                total_returned_cost\n                items {\n                    id\n                    status_display\n                    status\n                    reason\n                    returned_cost\n                    count\n                    description\n                    reply_reason\n                    reply_description\n                    relative_voucher_amount\n                    images {\n                        id\n                        uuid\n                        image\n                    }\n                    order_item {\n                        id\n                        single_cost\n                        single_primary_cost\n                        single_tax\n                        single_profit\n                        product_label\n                        details {\n                            variant {\n                                id\n                                cost\n                                name\n                                images {\n                                    id\n                                    uuid\n                                    image\n                                }\n                                status\n                                online_primary_cost\n                                primary_cost\n                                product_serialized {\n                                    name\n                                    id\n                                    label\n                                    images {\n                                        id\n                                        uuid\n                                        image\n                                    }\n                                }\n                                online_cost\n                                option_values {\n                                    id\n                                    value\n                                    color_code\n                                    option {\n                                        id\n                                        name\n                                        is_color\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetReturnedOrder($orderId: ID!) {\n        customer {\n            getReturnedOrder(id: $orderId) {\n                id\n                status\n                reference_code\n                order_reference_code\n                created_at\n                status_display\n                first_name\n                order_created_at\n                last_name\n                phone_number\n                card_number\n                total_returned_cost\n                items {\n                    id\n                    status_display\n                    status\n                    reason\n                    returned_cost\n                    count\n                    description\n                    reply_reason\n                    reply_description\n                    relative_voucher_amount\n                    images {\n                        id\n                        uuid\n                        image\n                    }\n                    order_item {\n                        id\n                        single_cost\n                        single_primary_cost\n                        single_tax\n                        single_profit\n                        product_label\n                        details {\n                            variant {\n                                id\n                                cost\n                                name\n                                images {\n                                    id\n                                    uuid\n                                    image\n                                }\n                                status\n                                online_primary_cost\n                                primary_cost\n                                product_serialized {\n                                    name\n                                    id\n                                    label\n                                    images {\n                                        id\n                                        uuid\n                                        image\n                                    }\n                                }\n                                online_cost\n                                option_values {\n                                    id\n                                    value\n                                    color_code\n                                    option {\n                                        id\n                                        name\n                                        is_color\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetOrdersStatusCount {\n        customer {\n            getOrderStatusCount: getOrders {\n                returns_count\n                status_count {\n                    status\n                    total\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetOrdersStatusCount {\n        customer {\n            getOrderStatusCount: getOrders {\n                returns_count\n                status_count {\n                    status\n                    total\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBreadcrumb($params: BreadcrumbParams) {\n        customer {\n            getBreadcrumb(params: $params) {\n                id\n                title\n                image {\n                    id\n                    image\n                }\n                child {\n                    id\n                    title\n                    image {\n                        id\n                        image\n                    }\n                    child {\n                        id\n                        title\n                        image {\n                            id\n                            image\n                        }\n                        child {\n                            id\n                            title\n                            image {\n                                id\n                                image\n                            }\n                            child {\n                                id\n                                title\n                                image {\n                                    id\n                                    image\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetBreadcrumb($params: BreadcrumbParams) {\n        customer {\n            getBreadcrumb(params: $params) {\n                id\n                title\n                image {\n                    id\n                    image\n                }\n                child {\n                    id\n                    title\n                    image {\n                        id\n                        image\n                    }\n                    child {\n                        id\n                        title\n                        image {\n                            id\n                            image\n                        }\n                        child {\n                            id\n                            title\n                            image {\n                                id\n                                image\n                            }\n                            child {\n                                id\n                                title\n                                image {\n                                    id\n                                    image\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAddresses {\n        customer {\n            getAddresses {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAddresses {\n        customer {\n            getAddresses {\n                city\n                province\n                address\n                no\n                postal_code\n                id\n                unit_number\n                description\n                receiver_name\n                receiver_lastname\n                receiver_number\n                name\n                longitude\n                latitude\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getShippingAddresses($addressId: ID!) {\n        customer {\n            getShippingAddresses(address_id: $addressId) {\n                cost\n                id\n                name\n                shipping_delay\n                shipping_type\n                shipping_type_display\n                time_sending\n            }\n        }\n    }\n"): (typeof documents)["\n    query getShippingAddresses($addressId: ID!) {\n        customer {\n            getShippingAddresses(address_id: $addressId) {\n                cost\n                id\n                name\n                shipping_delay\n                shipping_type\n                shipping_type_display\n                time_sending\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPocket {\n        customer {\n            getPocket {\n                cost\n                id\n                is_active\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetPocket {\n        customer {\n            getPocket {\n                cost\n                id\n                is_active\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetLoyaltyCredit {\n        customer {\n            getLoyaltyCreditV2 {\n                loyalty_credit\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetLoyaltyCredit {\n        customer {\n            getLoyaltyCreditV2 {\n                loyalty_credit\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFavorites($params: FavoritesParams) {\n        customer {\n            getFavoritesV2(params: $params) {\n                count\n                next\n                results {\n                    average_score\n                    colors {\n                        color_code\n                        id\n                    }\n                    id\n                    label\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        time_delay\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                    }\n                    main_image {\n                        id\n                        image\n                    }\n                    images {\n                        id\n                        image\n                    }\n                    hot_offer_expired_date\n                    has_stock\n                    orderable_count\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFavorites($params: FavoritesParams) {\n        customer {\n            getFavoritesV2(params: $params) {\n                count\n                next\n                results {\n                    average_score\n                    colors {\n                        color_code\n                        id\n                    }\n                    id\n                    label\n                    min_variant {\n                        id\n                        cost\n                        stock\n                        time_delay\n                        is_unlimited\n                        loyalty_gift\n                        primary_cost\n                        max_quantity\n                        profit_percent\n                    }\n                    main_image {\n                        id\n                        image\n                    }\n                    images {\n                        id\n                        image\n                    }\n                    hot_offer_expired_date\n                    has_stock\n                    orderable_count\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query IsFavorite($id: ID!) {\n        customer {\n            isFavorite(id: $id) {\n                is_favorite\n            }\n        }\n    }\n"): (typeof documents)["\n    query IsFavorite($id: ID!) {\n        customer {\n            isFavorite(id: $id) {\n                is_favorite\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTransactionTypes {\n        customer {\n            getTransactionTypes {\n                gateway_type\n                persian_gateway_type\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetTransactionTypes {\n        customer {\n            getTransactionTypes {\n                gateway_type\n                persian_gateway_type\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetLoyaltyLogs($params: LoyaltyLogsParams) {\n        customer {\n            getLoyaltyLogs(params: $params) {\n                count\n                next\n                results {\n                    account_credit\n                    amount\n                    created_at\n                    data {\n                        game\n                    }\n                    id\n                    log_type_display\n                    order_cost\n                    reason\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetLoyaltyLogs($params: LoyaltyLogsParams) {\n        customer {\n            getLoyaltyLogs(params: $params) {\n                count\n                next\n                results {\n                    account_credit\n                    amount\n                    created_at\n                    data {\n                        game\n                    }\n                    id\n                    log_type_display\n                    order_cost\n                    reason\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getApproximateSendingDate($addressId: ID!, $id: ID!) {\n        customer {\n            getShippingAddress(address_id: $addressId, id: $id) {\n                approximate_sending_date {\n                    start\n                    end\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getApproximateSendingDate($addressId: ID!, $id: ID!) {\n        customer {\n            getShippingAddress(address_id: $addressId, id: $id) {\n                approximate_sending_date {\n                    start\n                    end\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetThemeCustomization($themeName: String) {\n        customer {\n            getThemeCustomization(themeName: $themeName) {\n                id\n                data\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetThemeCustomization($themeName: String) {\n        customer {\n            getThemeCustomization(themeName: $themeName) {\n                id\n                data\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserType {\n        customer {\n            getUserType {\n                type\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserType {\n        customer {\n            getUserType {\n                type\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetVariantsStock($ids: [ID!]!) {\n        customer {\n            getVariantsStock(ids: $ids) {\n                id\n                orderable_count\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetVariantsStock($ids: [ID!]!) {\n        customer {\n            getVariantsStock(ids: $ids) {\n                id\n                orderable_count\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBlogArticles($params: blogArticlesParams) {\n        customer {\n            getBlogArticles(params: $params) {\n                count\n                next\n                previous\n                results {\n                    id\n                    title\n                    content\n                    published_at\n                    view_count\n                    like_count\n                    tags {\n                        id\n                        title\n                    }\n                    category {\n                        id\n                        title\n                        parent\n                    }\n                    image\n                    is_active\n                    is_liked\n                    is_highlight\n                    slug\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetBlogArticles($params: blogArticlesParams) {\n        customer {\n            getBlogArticles(params: $params) {\n                count\n                next\n                previous\n                results {\n                    id\n                    title\n                    content\n                    published_at\n                    view_count\n                    like_count\n                    tags {\n                        id\n                        title\n                    }\n                    category {\n                        id\n                        title\n                        parent\n                    }\n                    image\n                    is_active\n                    is_liked\n                    is_highlight\n                    slug\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBlogHighlights($params: blogHighlightsParams) {\n        customer {\n            getBlogHighlights(params: $params) {\n                count\n                next\n                previous\n                results {\n                    id\n                    article {\n                        id\n                        title\n                        image\n                        slug\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetBlogHighlights($params: blogHighlightsParams) {\n        customer {\n            getBlogHighlights(params: $params) {\n                count\n                next\n                previous\n                results {\n                    id\n                    article {\n                        id\n                        title\n                        image\n                        slug\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBlogArticle($id: ID!) {\n        customer {\n            getBlogArticle(id: $id) {\n                id\n                title\n                content\n                published_at\n                view_count\n                tags {\n                    id\n                    title\n                }\n                category {\n                    id\n                    title\n                    parent\n                }\n                image\n                is_active\n                is_liked\n                like_count\n                is_highlight\n                slug\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetBlogArticle($id: ID!) {\n        customer {\n            getBlogArticle(id: $id) {\n                id\n                title\n                content\n                published_at\n                view_count\n                tags {\n                    id\n                    title\n                }\n                category {\n                    id\n                    title\n                    parent\n                }\n                image\n                is_active\n                is_liked\n                like_count\n                is_highlight\n                slug\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSitemap {\n        customer {\n            getSitemap\n        }\n    }\n"): (typeof documents)["\n    query getSitemap {\n        customer {\n            getSitemap\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTokenPanel {\n        notification {\n            getToken {\n                token\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetTokenPanel {\n        notification {\n            getToken {\n                token\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getShippingSokect($addressId: ID!) {\n        customer {\n            getShippingSokect(address_id: $addressId) {\n                cost\n                id\n                name\n                shipping_delay\n                shipping_type\n                shipping_type_display\n                time_sending\n            }\n        }\n    }\n"): (typeof documents)["\n    query getShippingSokect($addressId: ID!) {\n        customer {\n            getShippingSokect(address_id: $addressId) {\n                cost\n                id\n                name\n                shipping_delay\n                shipping_type\n                shipping_type_display\n                time_sending\n            }\n        }\n    }\n"];

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;